import { Component, ElementRef, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators, ReactiveFormsModule } from '@angular/forms';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { ActivatedRoute, Router } from '@angular/router';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';
import { NgIf, NgFor } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatIconModule } from '@angular/material/icon';
import { NgClass } from '@angular/common';

// üìå Scanner QR Code (ZXing)
import { ZXingScannerModule } from '@zxing/ngx-scanner';
import { BarcodeFormat } from '@zxing/browser';
import { Vehicule } from '../../../services/vehicule.service';
import { AuthService } from '../../../services/auth.service';
import { ParcService } from '../../../services/parc.service';
import { JwtHelperService } from '@auth0/angular-jwt';

@Component({
  selector: 'app-enregistrer-vehicule',
  templateUrl: './enregistrer-vehicule.component.html',
  styleUrls: ['./enregistrer-vehicule.component.scss'],
  standalone: true,
  imports: [
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatSnackBarModule,
    MatCardModule,
    MatSelectModule,
    NgIf,
    NgFor,
    ZXingScannerModule,
    MatIconModule,
    NgClass
  ],
})

export class EnregistrerVehiculeComponent {
  form: FormGroup;
  isScanning = false;
  qrResult: string = '';
  scannerFormats = [BarcodeFormat.QR_CODE];
  avaries!: FormArray;  // ‚úÖ D√©claration correcte de avaries
  photoPreviews: string[][] = []; // ‚úÖ Liste des photos pr√©visualis√©es
  activeIndex: number | null = null;
  isCapturing = false;
  isExistingVehicle = false;
  statutVehicule: string | null = null;
  imageAgrandie: string | null = null;
  isUsingFrontCamera = false;
  typesAvaries: string[] = ['Rayure', 'Bosse', 'Pi√®ce manquante', 'Autre'];
  avariesConfirmees: any[] = [];
  parcId!: number; 
  photos: File[] = [];
  isGestionnaire = false;


  constructor(
    private fb: FormBuilder,
    private http: HttpClient,
    private router: Router,
    private snackBar: MatSnackBar,
    private authService: AuthService,
    private route: ActivatedRoute,
    private parcService: ParcService
  ) {
    // 1Ô∏è‚É£ Initialiser le parc par d√©faut
    this.parcId = this.getParcIdDepuisUrlSync(); // fallback par d√©faut
    this.isGestionnaire = false;
  
    // 2Ô∏è‚É£ Cr√©er le formulaire (1 seule fois)
    this.form = this.fb.group({
      numeroChassis: ['', Validators.required],
      modele: ['', Validators.required],
      description: ['', Validators.required],
      engine: ['', Validators.required],
      keyCode: ['', Validators.required],
      couleur: ['', Validators.required],
      parc: [this.parcId, Validators.required],
      avaries: this.fb.array([]),
    });
    this.avaries = this.form.get('avaries') as FormArray;
  
    // 3Ô∏è‚É£ R√©cup√©rer token et d√©coder les infos utiles
    const token = localStorage.getItem('token');
    if (token) {
      const helper = new JwtHelperService();
      const decoded = helper.decodeToken(token);
      this.isGestionnaire = decoded.role === 'ROLE_GESTIONNAIRE_STOCK';
  
      if (decoded.parcId) {
        this.parcId = decoded.parcId;
        this.form.controls['parc'].setValue(this.parcId);
        console.log("‚úÖ Parc ID d√©tect√© via token JWT :", this.parcId);
      } else {
        console.warn("‚ö†Ô∏è Parc ID non trouv√© dans le token, fallback via URL :", this.parcId);
      }
    }
  
    // 4Ô∏è‚É£ G√©rer les queryParams (scan ou redirection)
    this.route.queryParams.subscribe(params => {
      const numeroChassis = params['numeroChassis'];
      const parcNom = params['parc'];
  
      if (numeroChassis) {
        this.form.controls['numeroChassis'].setValue(numeroChassis);
        this.qrResult = numeroChassis;
        this.verifierVehicule(numeroChassis);
        this.snackBar.open("üì¶ Num√©ro de ch√¢ssis d√©tect√© automatiquement", "Fermer", { duration: 2500 });
      }
  
      if (parcNom) {
        const parcId = this.getParcIdDepuisUrlSync();
        this.form.controls['parc'].setValue(parcId);
      }
    });
  
    // 5Ô∏è‚É£ Activation du pr√©remplissage si saisie manuelle
    this.form.get('numeroChassis')?.valueChanges.subscribe(numeroChassis => {
      if (numeroChassis) {
        this.verifierVehicule(numeroChassis);
      }
    });
  }
  
  getParcIdDepuisUrlSync(): number {
    const parcNom = this.route.snapshot.queryParams['parc'] || this.route.snapshot.paramMap.get('parc');
    console.log("üîç Parc d√©tect√© depuis l'URL :", parcNom);
  
    const mappingParcNomToId: Record<string, number> = {
      'MEGRINE': 1,
      'A': 1,
      'CHARGUIA': 2,
      'B': 2,
    };
  
    if (parcNom && mappingParcNomToId[parcNom.toUpperCase()]) {
      return mappingParcNomToId[parcNom.toUpperCase()];
    }
  
    return 1; // Valeur par d√©faut
  }
  onFileSelected(event: any) {
    if (event.target.files.length > 0) {
      this.photos = Array.from(event.target.files);
      console.log("üì∏ Photos s√©lectionn√©es :", this.photos);
    }
  }
  /** ‚úÖ D√©tection dynamique de l'ID du parc */
//   getParcId() {
//     const parcIdFromUrl = this.route.snapshot.queryParams['parc'];
//     console.log("üîç V√©rification brute de `parcIdFromUrl`:", parcIdFromUrl, "Type:", typeof parcIdFromUrl);

//     if (parcIdFromUrl) {
//         // üîπ V√©rifier si `parcIdFromUrl` est bien une cha√Æne
//         const mappingParcId: { [key: string]: number } = {
//             'MEGRINE': 1,
//             'A': 1,
//             'CHARGUIA': 2,
//             'B': 2,
//             'AUPORT': 4,
//             'C': 4,
//         };

//         // üîπ V√©rifier si la valeur existe dans le mapping
//         if (mappingParcId[parcIdFromUrl]) {
//             this.parcId = mappingParcId[parcIdFromUrl]; // üî• R√©cup√©ration s√ªre
//         } else {
//             console.warn("‚ö†Ô∏è Parc non reconnu, utilisation de la valeur par d√©faut.");
//             this.parcId = 1;
//         }

//         console.log("üìå Parc ID attribu√©:", this.parcId);
//     } else {
//         console.warn("‚ö†Ô∏è `parcIdFromUrl` est NULL ou UNDEFINED, tentative r√©cup√©ration utilisateur...");
//         this.authService.getUser().subscribe(user => {
//             if (user && user.parcId) {
//                 this.parcId = user.parcId;
//                 console.log("üü¢ Parc ID r√©cup√©r√© depuis l'utilisateur :", this.parcId);
//             } else {
//                 this.parcId = 1;
//                 console.log("‚ö†Ô∏è Parc ID non trouv√©, valeur par d√©faut :", this.parcId);
//             }
//             this.form.controls['parc'].setValue(this.parcId);
//         });
//     }

//     // üîπ V√©rification finale et correction si `NaN`
//     if (isNaN(this.parcId)) {
//         console.error("üö® ERREUR: `parcId` est NaN apr√®s attribution, correction en 1 !");
//         this.parcId = 1;
//     }

//     this.form.controls['parc'].setValue(this.parcId);
// }

  ajouterAvarie() {
    this.avaries.push(this.fb.group({
      type: ['', Validators.required],
      commentaire: [''],
      photos: this.fb.array([]),
    }));
  }
  /** ‚úÖ D√©marrer le scanner QR Code */
  startScanner() {
    this.isScanning = true;
  }

  /** ‚úÖ Capture du QR Code */
  onCodeResult(resultString: string) {
    console.log("üì∑ QR Code d√©tect√© :", resultString);
    if (!resultString) {
      console.error("üö® QR Code invalide !");
      return;
    }
    this.qrResult = resultString;
    this.form.controls['numeroChassis'].setValue(resultString);
    this.isScanning = false;
    this.verifierVehicule(resultString);
  }
  verifierVehicule(numeroChassis: string) {
    this.http.get<Vehicule>(`http://192.168.1.121:8080/api/vehicules/chassis/${numeroChassis}`)
      .subscribe({
        next: (vehicule) => {
          console.log("üìå V√©hicule trouv√© :", vehicule);
          
          this.form.patchValue({
            modele: vehicule.modele || '',
            couleur: vehicule.couleur || '',
            description: vehicule.description || '',
            engine: vehicule.engine || '',
            keyCode: vehicule.keyCode || '',
            production: vehicule.production || '',
            statut: vehicule.statut || '',
            parc: vehicule.parc?.id || this.getParcIdDepuisUrl(),
          });
  
          this.form.updateValueAndValidity();
  
          console.log("‚úÖ Formulaire apr√®s remplissage:", this.form.valid, this.form.value);
        },
        error: (err) => {
          this.isExistingVehicle = false;
          console.warn("‚ùå Num√©ro de ch√¢ssis non trouv√© :", numeroChassis);
          this.snackBar.open("üö® Num√©ro de ch√¢ssis introuvable !", "Fermer", { duration: 4000 });
        
          // R√©initialiser les champs du formulaire s‚Äôils contiennent encore des donn√©es
          this.form.patchValue({
            modele: '',
            couleur: '',
            description: '',
            engine: '',
            keyCode: '',
            production: '',
            statut: '',
            parc: this.getParcIdDepuisUrl()
          });
        }
      });
  }
  confirmerAvarie(index: number) {
    const avarie = this.avaries.at(index).value;

    // üìå Ajouter la liste des photos √† l'avarie confirm√©e
    const photos = this.photoPreviews[index] || [];

    this.avariesConfirmees.push({
        type: avarie.type,
        commentaire: avarie.commentaire,
        photos: [...photos] // Ajout des photos associ√©es
    });

    // üî• Supprimer l'avarie de la liste en cours
    this.avaries.removeAt(index);
    this.photoPreviews.splice(index, 1);

    this.snackBar.open("‚úÖ Avarie confirm√©e avec succ√®s", "Fermer", { duration: 3000 });
}
  supprimerAvarieConfirmee(index: number) {
    this.avariesConfirmees.splice(index, 1);
    this.snackBar.open("‚ùå Avarie supprim√©e", "Fermer", { duration: 3000 });
  }

  supprimerAvarie(index: number) {
    this.avaries.removeAt(index);
    this.photoPreviews.splice(index, 1);
  }

  /** ‚úÖ Ajouter une photo */
  onFileChange(event: any, avarieIndex: number) {
    const file = event.target.files[0];
    if (!file) return;
  
    console.log("üì∏ Photo ajout√©e :", file.name);
  
    // ‚úÖ V√©rifier si `photos` est bien initialis√©
    if (!this.photos) {
      this.photos = [];
    }
  
    // ‚úÖ Ajouter la photo dans la liste globale
    this.photos.push(file);
  
    // ‚úÖ V√©rifier si l'index existe dans la liste des avaries
    if (this.avaries.length <= avarieIndex) {
      console.error("üö® Erreur : Aucune avarie trouv√©e √† l'index", avarieIndex);
      return;
    }
  
    // ‚úÖ R√©cup√©rer l'avarie et s'assurer que c'est un FormGroup
    const avarie = this.avaries.at(avarieIndex) as FormGroup;
    if (!avarie) {
      console.error("üö® Erreur : Impossible de r√©cup√©rer l'avarie √† l'index", avarieIndex);
      return;
    }
  
    // ‚úÖ V√©rifier si le champ 'photos' existe, sinon l'initialiser
    if (!avarie.get('photos')) {
      avarie.addControl('photos', this.fb.array([]));
    }
  
    // ‚úÖ Stocker l'image dans le formulaire de l'avarie
    const photosArray = avarie.get('photos') as FormArray;
    photosArray.push(this.fb.control(file));
  
    // ‚úÖ Ajouter la photo √† la pr√©visualisation
    if (!this.photoPreviews[avarieIndex]) {
      this.photoPreviews[avarieIndex] = [];
    }
  
    const reader = new FileReader();
    reader.onload = (e: any) => {
      this.photoPreviews[avarieIndex].push(e.target.result);
      console.log("üîç Nouvelle pr√©visualisation :", this.photoPreviews[avarieIndex]);
    };
    reader.readAsDataURL(file);
  }

  /** ‚úÖ Supprimer une photo */
  removePhoto(avarieIndex: number, photoIndex: number) {
    if (this.photoPreviews[avarieIndex]) {
      this.photoPreviews[avarieIndex].splice(photoIndex, 1);
    }
  }

  /** ‚úÖ Ouvrir une image en plein √©cran */
  ouvrirImage(src: string) {
    this.imageAgrandie = src;
  }

  fermerImage() {
    this.imageAgrandie = null;
  }
  envoyerAvarieAvecPhotos(vehiculeId: number, avarie: any, index: number) {
    if (!vehiculeId || !avarie || !avarie.type) {
      console.warn("üö® Donn√©es invalides pour l'envoi d'une avarie :", { vehiculeId, avarie });
      return;
    }
  
    const formData = new FormData();
  
    // ‚úÖ Ajouter les champs texte de l‚Äôavarie
    const avariePayload = {
      type: avarie.type,
      commentaire: avarie.commentaire || ''
    };
    formData.append("avarie", JSON.stringify(avariePayload));
  
    // ‚úÖ Ajouter les photos associ√©es (si disponibles)
    const photoList = this.photoPreviews[index];
    if (photoList && Array.isArray(photoList)) {
      photoList.forEach((photoBase64: string, i: number) => {
        if (photoBase64.startsWith("data:image")) {
          const blob = this.dataURLtoBlob(photoBase64);
          formData.append("photos", blob, `photo_${i}.png`);
        } else {
          console.warn(`‚ö†Ô∏è Format non support√© pour la photo ${i} :`, photoBase64);
        }
      });
    }
  
    const token = localStorage.getItem('token');
  
    this.http.post(
      `http://192.168.1.121:8080/api/vehicules/${vehiculeId}/avaries/photos`,
      formData,
      {
        headers: new HttpHeaders({
          'Authorization': `Bearer ${token}`
        })
      }
    ).subscribe({
      next: (res) => {
        console.log(`‚úÖ Avarie #${index + 1} envoy√©e avec succ√®s pour v√©hicule ID ${vehiculeId}`, res);
        this.snackBar.open(`‚úÖ Avarie ${index + 1} enregistr√©e`, 'Fermer', { duration: 2500 });
      },
      error: (err) => {
        console.error(`‚ùå Erreur envoi avarie #${index + 1} :`, err);
        this.snackBar.open(`‚ùå √âchec ajout avarie ${index + 1}`, 'Fermer', { duration: 3000 });
      }
    });
  }
  redirectAfterReception() {
    const token = localStorage.getItem('token');
    if (token) {
      const jwtHelper = new JwtHelperService();
      const decodedToken = jwtHelper.decodeToken(token);
      const role = decodedToken.role.replace('ROLE_', '').toUpperCase();
  
      if (role === "GESTIONNAIRE_STOCK") {
        this.router.navigate(['/gestionnaire-stock-dashboard']);
      } else {
        this.router.navigate(['/vehicules']);
      }
    } else {
      this.router.navigate(['/vehicules']);
    }
  }
  enregistrerVehicule() {
    if (this.form.invalid) {
      this.snackBar.open('üö® Formulaire invalide', 'Fermer', { duration: 3000 });
      return;
    }
  
    const formData = new FormData();
    formData.append('numeroChassis', this.form.value.numeroChassis);
    formData.append('parcId', this.parcId ? this.parcId.toString() : '1');
  
    // üîß Ajouter la premi√®re avarie (juste pour compatibilit√© backend)
    if (this.avariesConfirmees.length > 0) {
      const avarie = { ...this.avariesConfirmees[0] };
      if (Array.isArray(avarie.photos)) {
        avarie.photos = avarie.photos.filter((photo: any) => Object.keys(photo).length > 0);
      }
      delete avarie.photos;
      formData.append('avarie', JSON.stringify(avarie));
    } else {
      formData.append('avarie', "");
    }
  
    if (this.photos && this.photos.length > 0) {
      this.photos.forEach((photo) => {
        formData.append('photos', photo);
      });
    }
  
    console.log("‚úÖ FormData avant envoi:");
    for (let pair of formData.entries()) {
      if (pair[1] instanceof File) {
        console.log(`${pair[0]}:`, pair[1].name);
      } else {
        console.log(`${pair[0]}:`, pair[1]);
      }
    }
  
    const numeroChassis = this.form.value.numeroChassis;
  
    this.http.post(
      `http://192.168.1.121:8080/api/vehicules/reception`,
      formData,
      {
        headers: new HttpHeaders({
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }),
        responseType: 'text' as 'json'
      }
    ).subscribe({
      next: () => {
        this.snackBar.open("üöó V√©hicule r√©ceptionn√© avec succ√®s !", "Fermer", { duration: 3000 });
  
        // üîÅ √âtape suppl√©mentaire : r√©cup√©rer l'ID du v√©hicule
        this.http.get<Vehicule>(`http://192.168.1.121:8080/api/vehicules/chassis/${numeroChassis}`).subscribe({
          next: (vehicule) => {
            if (vehicule && vehicule.id) {
              this.avariesConfirmees.forEach((avarie, i) => {
                this.envoyerAvarieAvecPhotos(vehicule.id, avarie, i);
              });
            }
  
            // ‚úÖ Redirection apr√®s r√©ception + enregistrement avaries
            this.redirectAfterReception();
          },
          error: (err) => {
            console.error("‚ö†Ô∏è Erreur r√©cup√©ration v√©hicule :", err);
            this.redirectAfterReception();
          }
        });
      },
      error: (err) => {
        console.error("‚ùå Erreur r√©ception v√©hicule:", err);
        if (err.status === 409 && typeof err.error === 'string' && err.error.includes("d√©j√† dans le parc")) {
          this.snackBar.open("üö´ Ce v√©hicule est d√©j√† r√©ceptionn√© dans ce parc !", "Fermer", { duration: 4000 });
        } else {
          this.snackBar.open("‚ùå √âchec de la r√©ception du v√©hicule", "Fermer", { duration: 3000 });
        }
      }
    });
  }
  
  getPhotoUrl(photoId: number): string {
    return `http://192.168.1.121:8080/photos/${photoId}`;
  }
/** ‚úÖ Rafra√Æchir les donn√©es du v√©hicule apr√®s mise √† jour */
refreshVehiculeData(numeroChassis: string) {
  this.http.get<Vehicule>(`http://192.168.1.121:8080/api/vehicules/chassis/${numeroChassis}?nocache=${new Date().getTime()}`)
    .subscribe({
      next: (updatedVehicule) => {
        console.log("‚úÖ V√©hicule mis √† jour r√©cup√©r√© :", updatedVehicule);
        this.form.patchValue({
          modele: updatedVehicule.modele,
          couleur: updatedVehicule.couleur,
          description: updatedVehicule.description,
          engine: updatedVehicule.engine,
          keyCode: updatedVehicule.keyCode,
          pegCode: updatedVehicule.peg,
          dateArrivee: updatedVehicule.dateArrivee,
          statut: updatedVehicule.statut
        });
      },
      error: (error) => {
        console.error("üö® Erreur lors de la r√©cup√©ration du v√©hicule mis √† jour :", error);
      }
    });
}

/** ‚úÖ Convertir une image en base64 vers un Blob */
dataURLtoBlob(dataUrl: string) {
  let arr = dataUrl.split(','), 
      mime = arr[0].match(/:(.*?);/)![1],
      bstr = atob(arr[1]), 
      n = bstr.length, 
      u8arr = new Uint8Array(n);
  
  while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
  }
  return new Blob([u8arr], { type: mime });
}


getParcIdDepuisUrl(): void {
  const parcNom = this.route.snapshot.paramMap.get('parc') || this.route.snapshot.queryParams['parc'];
  console.log("üîç Parc d√©tect√© depuis l'URL :", parcNom);

  if (!parcNom) {
    console.warn("‚ö†Ô∏è Aucun parc trouv√© dans l'URL, utilisation de la valeur par d√©faut.");
    this.parcId = 1; // Valeur par d√©faut si aucun parc n'est trouv√©
    return;
  }

  this.parcService.getParcs().subscribe(parcs => {
    const parcTrouve = parcs.find(parc => parc.nom.toUpperCase() === parcNom.toUpperCase());

    if (parcTrouve) {
      this.parcId = parcTrouve.id;
      console.log("‚úÖ Parc ID attribu√© dynamiquement:", this.parcId);
    } else {
      console.warn(`‚ö†Ô∏è Parc '${parcNom}' non trouv√© en base, utilisation de la valeur par d√©faut.`);
      this.parcId = 1;
    }

    // ‚úÖ Mise √† jour du formulaire avec l'ID du parc
    this.form.controls['parc'].setValue(this.parcId);
  }, error => {
    console.error("üö® Erreur lors de la r√©cup√©ration des parcs :", error);
    this.parcId = 1; // Valeur de secours
  });
}


  envoyerAvarieEtPhotos(vehiculeId: number, avarie: any, index: number) {
    const avarieData = { ...avarie, vehiculeId };
  
    const token = localStorage.getItem('token');
    if (token) {
      const decodedToken = JSON.parse(atob(token.split('.')[1]));
      console.log("üîç Token d√©cod√© :", decodedToken);
      console.log("üîç R√¥le extrait :", decodedToken.role);
    }
  
    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      })
    };
  
    this.http.post(`http://192.168.1.121:8080/api/avaries`, avarieData, httpOptions).subscribe({
      next: (avarieEnregistree: any) => {
        
        // ‚úÖ Si l'avarie a √©t√© enregistr√©e, envoyer les photos associ√©es
        if (this.photoPreviews[index] && this.photoPreviews[index].length) {
          this.photoPreviews[index].forEach((photo, i) => {
            this.envoyerPhoto(avarieEnregistree.id, photo, i);
          });
        }
      },
      error: (error) => {
        console.error("üö® Erreur lors de l'enregistrement de l‚Äôavarie :", error);
      }
    });
  }

  enregistrerAvaries() {
    if (!this.form.value.avaries?.length) {
      console.warn("‚ö†Ô∏è Aucun enregistrement d'avarie, la liste est vide.");
      return;
    }
  
    const numeroChassis = this.form.get('numeroChassis')?.value;
    if (!numeroChassis) {
      console.error("üö® Erreur : num√©ro de ch√¢ssis non d√©fini !");
      return;
    }
  
    this.form.value.avaries.forEach((avarie: any, index: number) => {
      console.log(`üì° Envoi de l'avarie ${index + 1}:`, avarie);
      this.envoyerAvarieEtPhotos(numeroChassis, avarie, index);
    });
  }
  envoyerPhoto(avarieId: number, photoBase64: string, index: number) {
    if (!photoBase64.startsWith("data:image/")) {
      console.error("üö® Erreur : format de l'image incorrect", photoBase64);
      return;
    }
  
    const formData = new FormData();
    const blob = this.dataURLtoBlob(photoBase64);
    formData.append('photo', blob, `photo_${index}.png`);
    formData.append('avarieId', avarieId.toString());
  
    console.log(`üì° Envoi de la photo ${index + 1} pour l'avarie ${avarieId}`);
    this.http.post(`http://192.168.1.121:8080/api/photos`, formData).subscribe({
      next: () => console.log(`‚úÖ Photo ${index + 1} envoy√©e`),
      error: (error) => console.error(`‚ùå Erreur lors de l'envoi de la photo ${index + 1} :`, error)
    });
  }
  /** ‚úÖ R√©initialisation du formulaire apr√®s enregistrement */
  resetForm() {
    this.form.reset();
    this.photoPreviews = [];
    this.avaries.clear();
  }
}
