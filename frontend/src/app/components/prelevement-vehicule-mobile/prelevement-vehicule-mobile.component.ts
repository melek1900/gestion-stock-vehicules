import { Component } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { MatSnackBar } from '@angular/material/snack-bar';
import { CommonModule, NgFor, NgIf } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatChipsModule } from '@angular/material/chips';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatTableModule } from '@angular/material/table';
import { ZXingScannerModule } from '@zxing/ngx-scanner';
import { BarcodeFormat } from '@zxing/browser';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { Html5Qrcode } from 'html5-qrcode';

@Component({
  selector: 'app-prelevement-vehicule-mobile',
  templateUrl: './prelevement-vehicule-mobile.component.html',
  styleUrls: ['./prelevement-vehicule-mobile.component.scss'],
  standalone: true,
  imports: [  CommonModule,
    FormsModule,
    NgFor,
    NgIf,
    MatButtonModule,
    MatCardModule,
    MatFormFieldModule,
    MatInputModule,
    MatIconModule,
    MatChipsModule,
    MatTableModule,
    ZXingScannerModule,
    MatProgressBarModule
  ]
})
export class PrelevementVehiculeMobileComponent {
  ordreMission: string = '';
  vehicules: any[] = [];
  vehiculesManquants: any[] = [];
  isScannerActif = false;
  isLoading: boolean = false;
  scannerStarted = false;
  html5QrCode!: Html5Qrcode;
  formatsScanner = [
    BarcodeFormat.QR_CODE, 
    BarcodeFormat.EAN_13, 
    BarcodeFormat.CODE_128, 
    BarcodeFormat.CODE_39
  ];
  numeroChassisSaisi: string = '';
  scannerOrdreActive = false;
  html5QrCodeOrdre!: Html5Qrcode;

  constructor(private http: HttpClient, private snackBar: MatSnackBar) {
    console.log("üì∏ Formats de codes support√©s :", Object.values(BarcodeFormat));
  }
  ngOnDestroy() {
    this.stopScanner();
  }
  startOrdreMissionScanner() {
    this.scannerOrdreActive = true;
  
    setTimeout(() => {
      const element = document.getElementById("reader-ordre");
      if (!element) return;
  
      this.html5QrCodeOrdre = new Html5Qrcode("reader-ordre");
  
      this.html5QrCodeOrdre.start(
        { facingMode: "environment" },
        { fps: 10, qrbox: { width: 250, height: 250 } },
        (decodedText: string) => {
          console.log("‚úÖ Ordre de mission d√©tect√© :", decodedText);
          this.ordreMission = decodedText;
          this.chargerOrdreMission();
          this.stopOrdreMissionScanner();
        },
        (errorMessage: string) => {
          console.log("üîÅ Lecture en cours (ordre) :", errorMessage);
        }
      ).catch((err) => {
        console.error("‚ùå Erreur d√©marrage scanner ordre :", err);
      });
    }, 300);
  }
  
  stopOrdreMissionScanner() {
    if (this.html5QrCodeOrdre) {
      this.html5QrCodeOrdre.stop().then(() => {
        this.scannerOrdreActive = false;
      }).catch((err) => {
        console.error("‚ùå Erreur arr√™t scanner ordre :", err);
      });
    }
  }
  onNumeroChassisChange(value: string) {
    const numero = value?.trim();
    
    // ‚úÖ D√©clenche d√®s que la longueur minimale est atteinte
    if (numero.length >= 10) {
      console.log("üöÄ Num√©ro d√©tect√© automatiquement :", numero);
      this.scannerVehicule(numero);
      this.numeroChassisSaisi = ''; 
    }
  }
  soumettreNumeroChassis() {
    const numero = this.numeroChassisSaisi?.trim();
  
    if (!numero) {
      this.snackBar.open("‚ö†Ô∏è Veuillez saisir un num√©ro de ch√¢ssis", "Fermer", { duration: 3000 });
      return;
    }
  
    this.scannerVehicule(numero); 
    this.numeroChassisSaisi = ''; 
  }
  startScanner() {
    console.log("‚ñ∂Ô∏è D√©marrage du scanner demand√©...");
    this.scannerStarted = true;
  
    setTimeout(() => {
      console.log("üïí Initialisation du scanner dans le setTimeout...");
      const readerElement = document.getElementById("reader");
  
      if (!readerElement) {
        console.error("‚ùå √âl√©ment #reader introuvable dans le DOM !");
        return;
      }
  
      console.log("üì∏ √âl√©ment #reader trouv√©. Initialisation Html5Qrcode...");
      this.html5QrCode = new Html5Qrcode("reader");
  
      this.html5QrCode.start(
        { facingMode: "environment" },
        { fps: 10, qrbox: { width: 250, height: 250 } },
        (decodedText: string) => {
          console.log("‚úÖ QR d√©tect√© :", decodedText);
          this.scannerVehicule(decodedText);
          this.stopScanner();
        },
        (errorMessage: string) => {
          console.log("üîÅ Erreur de scan (soft) :", errorMessage);
        }
      ).then(() => {
        console.log("üé• Scanner d√©marr√© avec succ√®s !");
      }).catch((err) => {
        console.error("‚ùå Erreur lors du d√©marrage du scanner :", err);
      });
  
    }, 300);
  }
  
  stopScanner() {
    if (this.scannerStarted && this.html5QrCode) {
      this.html5QrCode.stop().then(() => {
        this.scannerStarted = false;
      }).catch((err) => {
        console.error("Erreur arr√™t scanner:", err);
      });
    }
  }
  trierVehicules() {
    this.vehicules = this.vehicules
      .slice() // clone pour ne pas modifier la r√©f√©rence d‚Äôorigine
      .sort((a, b) => Number(a.preleve) - Number(b.preleve)); // false (non pr√©lev√©) avant true
  }

 

  aDesVehiculesNonPreleves(): boolean {
    return this.vehicules.some(v => !v.preleve);
  }

  chargerOrdreMission() {
    if (!this.ordreMission) return;
  
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${localStorage.getItem('token')}`
    });
  
    this.http.get<any[]>(`http://localhost:8080/api/ordres-mission/${this.ordreMission}/vehicules`, { headers })
      .subscribe({
        next: (data) => {
          console.log("üì¶ V√©hicules re√ßus :", data);

          this.vehicules = data.map(v => ({
            ...v,
            preleve: v.parcId === 3 || v.parcNom === 'TRANSFERT'
          }));
          this.trierVehicules();
          this.vehiculesManquants = [];
        },
        error: () => {
          this.snackBar.open('‚ùå Erreur lors du chargement des v√©hicules', 'Fermer', { duration: 3000 });
        }
      });
  }

  tousPreleves(): boolean {
    return this.vehicules.every(v => v.preleve);
  }
  private vibrate(pattern: number | number[] = 200): void {
    if ('vibrate' in navigator) {
      navigator.vibrate(pattern as any); // ‚úÖ Cast "any" pour bypass TS
    }
  }
  
  scannerVehicule(numeroChassis: string) {
    console.log('üì∑ Donn√©e scann√©e re√ßue:', numeroChassis);
  
    if (!this.ordreMission?.trim()) {
      this.snackBar.open("‚ö†Ô∏è Num√©ro d'ordre de mission invalide", "Fermer", { duration: 3000 });
      return;
    }
  
    if (!numeroChassis?.trim()) {
      this.snackBar.open("‚ö†Ô∏è Num√©ro de ch√¢ssis invalide", "Fermer", { duration: 3000 });
      return;
    }
  
    const token = localStorage.getItem('token');
    if (!token) {
      this.snackBar.open("‚ùå Vous devez √™tre connect√©", "Fermer", { duration: 3000 });
      return;
    }
  
    const headers = new HttpHeaders({ 'Authorization': `Bearer ${token}` });
    const url = `http://localhost:8080/api/ordres-mission/${encodeURIComponent(this.ordreMission)}/prelever/${encodeURIComponent(numeroChassis)}`;
  
    this.isLoading = true;
  
    this.http.patch(url, {}, { headers }).subscribe({
      next: (res: any) => {
        const vehicule = this.vehicules.find(v => v.numeroChassis === numeroChassis);
        if (vehicule) {
          vehicule.preleve = true;
          vehicule.parc = "TRANSFERT";
          vehicule.justScanned = true; // ‚úÖ Pour affichage temporaire "üöÄ Nouveau"
        }
  
        this.trierVehicules(); // ‚úÖ Tri dynamique apr√®s modification
        this.snackBar.open(`‚úÖ V√©hicule ${numeroChassis} pr√©lev√©`, 'Fermer', { duration: 3000 });
        this.vibrate(150);
  
        if (this.peutValiderPrelevement()) {
          this.snackBar.open('‚ö° Pr√©l√®vement partiel possible.', 'Fermer', { duration: 4000 });
        }
  
        this.desactiverScanner();
        this.isLoading = false;
      },
      error: (err) => {
        this.vibrate([100, 50, 100]);
        console.error("‚ùå Erreur lors du pr√©l√®vement :", err);
        this.snackBar.open(err.error?.message || '‚ùå V√©hicule invalide ou d√©j√† pr√©lev√©', 'Fermer', { duration: 3000 });
        this.desactiverScanner();
        this.isLoading = false;
      }
    });
  }
  desactiverScanner() {
    this.isScannerActif = false;
  }
  
  peutValiderPrelevement(): boolean {
    return this.vehicules.some(v => v.preleve);
  }
  
  
  validerPrelevement() {
    if (!this.peutValiderPrelevement()) {
      this.snackBar.open("‚ö†Ô∏è Au moins un v√©hicule doit √™tre pr√©lev√© avant validation", "Fermer", { duration: 3000 });
      return;
    }
  
    if (!this.ordreMission || this.ordreMission.trim() === "") {
      console.error("üö® Erreur: ordreMission est vide !");
      this.snackBar.open("‚ö†Ô∏è Num√©ro d'ordre de mission invalide", "Fermer", { duration: 3000 });
      return;
    }
  
    const token = localStorage.getItem('token');
    console.log("üìå Token envoy√© dans la requ√™te :", token);

    if (!token) {
      console.error("üö® Erreur: Aucun token JWT trouv√© !");
      this.snackBar.open("‚ùå Vous devez √™tre connect√©", "Fermer", { duration: 3000 });
      return;
    }
  
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`
    });
  
    const url = `http://localhost:8080/api/ordres-mission/${encodeURIComponent(this.ordreMission)}/valider-prelevement`;
  
    this.http.patch(url, {}, { headers })
      .subscribe({
        next: () => {
          this.snackBar.open('‚úÖ Pr√©l√®vement valid√©. L‚Äôordre de mission reste "En cours".', 'Fermer', { duration: 3000 });
  
          // ‚úÖ R√©initialiser les listes apr√®s validation
          this.vehicules = [];
          this.vehiculesManquants = [];
          this.ordreMission = '';
        },
        error: (err) => {
          console.error("‚ùå Erreur lors de la validation du pr√©l√®vement :", err);
          this.snackBar.open("‚ùå √âchec de la validation", "Fermer", { duration: 3000 });
        }
      });
  }
}
