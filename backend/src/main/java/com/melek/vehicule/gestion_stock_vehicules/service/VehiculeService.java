package com.melek.vehicule.gestion_stock_vehicules.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.melek.vehicule.gestion_stock_vehicules.dto.VehiculeDTO;
import com.melek.vehicule.gestion_stock_vehicules.model.*;
import com.melek.vehicule.gestion_stock_vehicules.repository.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityNotFoundException;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class VehiculeService {

    private final VehiculeRepository vehiculeRepository;
    private final AvarieRepository avarieRepository;
    private final ParcRepository parcRepository;
    private final StockRepository stockRepository;
    private final PhotoRepository photoRepository;
    private final ObjectMapper objectMapper;
    private final UtilisateurRepository utilisateurRepository;
    private final ParcService parcService;
    private final SousParcRepository sousParcRepository;
    private final OrdreMissionRepository ordreMissionRepository;
    private final VehiculeTransportRepository vehiculeTransportRepository;
    private final ChauffeurRepository chauffeurRepository;
    private final OrdreMissionService ordreMissionService;
    private final TypeMouvementRepository typeMouvementRepository;
    private final MouvementRepository mouvementRepository;
    public VehiculeService(
            VehiculeRepository vehiculeRepository,
            AvarieRepository avarieRepository,
            ParcRepository parcRepository,
            StockRepository stockRepository,
            PhotoRepository photoRepository,
            ObjectMapper objectMapper,
            ParcService parcService,
            UtilisateurRepository utilisateurRepository,
            SousParcRepository sousParcRepository,
            OrdreMissionRepository ordreMissionRepository,
            VehiculeTransportRepository vehiculeTransportRepository,
            ChauffeurRepository chauffeurRepository,
            OrdreMissionService ordreMissionService,
            TypeMouvementRepository typeMouvementRepository,
            MouvementRepository mouvementRepository) {
        this.vehiculeRepository = vehiculeRepository;
        this.avarieRepository = avarieRepository;
        this.parcRepository = parcRepository;
        this.stockRepository = stockRepository;
        this.photoRepository = photoRepository;
        this.objectMapper = objectMapper;
        this.parcService = parcService;
        this.utilisateurRepository = utilisateurRepository;
        this.sousParcRepository = sousParcRepository;
        this.ordreMissionRepository= ordreMissionRepository;
        this.vehiculeTransportRepository = vehiculeTransportRepository;
        this.chauffeurRepository = chauffeurRepository;
        this.ordreMissionService = ordreMissionService;
        this.typeMouvementRepository= typeMouvementRepository;
        this.mouvementRepository = mouvementRepository;
    }
    @PersistenceContext
    private EntityManager entityManager;
    /**
     * ‚úÖ Enregistrer une liste de v√©hicules (Import Excel)
     */


    public List<VehiculeDTO> getVehiculesFiltres(List<Long> parcIds, Set<String> marquesAccessibles) {
        return vehiculeRepository.findAll().stream()
                .filter(v -> v.getParc() != null && parcIds.contains(v.getParc().getId()))
                .filter(v -> v.getShortDescription() != null && marquesAccessibles.contains(v.getShortDescription().toUpperCase()))
                .map(VehiculeDTO::new)
                .toList();
    }
    @Transactional
    public Avarie ajouterAvarieEtPhotos(Long vehiculeId, Avarie avarie, List<MultipartFile> photos) {
        Vehicule vehicule = vehiculeRepository.findById(vehiculeId)
                .orElseThrow(() -> new EntityNotFoundException("üö® V√©hicule non trouv√©"));

        avarie.setVehicule(vehicule);
        avarie.setStatut(StatutAvarie.EN_COURS);

        Avarie saved = avarieRepository.save(avarie);

        if (photos != null) {
            for (MultipartFile file : photos) {
                try {
                    Photo photo = new Photo();
                    photo.setFileName(file.getOriginalFilename());
                    photo.setData(file.getBytes());
                    photo.setAvarie(saved);
                    photoRepository.save(photo);
                } catch (IOException e) {
                    throw new RuntimeException("Erreur lors de l'enregistrement de la photo", e);
                }
            }
        }

        return saved;
    }
    @Transactional
    public boolean transfertVersCarrosserie(String numeroChassis, Long sousParcId) {
        Vehicule vehicule = vehiculeRepository.findByNumeroChassis(numeroChassis)
                .orElseThrow(() -> new RuntimeException("V√©hicule introuvable"));

        Parc carrosserie = parcRepository.findByNomIgnoreCase("CARROSSERIE")
                .orElseThrow(() -> new RuntimeException("Parc Carrosserie introuvable"));

        SousParc sousParc = sousParcRepository.findById(sousParcId)
                .orElseThrow(() -> new RuntimeException("Sous-parc introuvable"));

        // Mise √† jour du v√©hicule
        vehicule.setParc(carrosserie);
        vehicule.setSousParc(sousParc);
        vehiculeRepository.save(vehicule);

        // üß† V√©rification de l‚Äôordre de mission associ√©
        OrdreMission ordre = ordreMissionRepository.findByVehiculesContaining(vehicule)
                .orElse(null);

        if (ordre != null) {
            boolean tousTransferes = ordre.getVehicules().stream()
                    .allMatch(v -> "CARROSSERIE".equalsIgnoreCase(v.getParc().getNom()));

            if (tousTransferes) {
                ordre.setStatut(StatutOrdreMission.CLOTURE);

                // Rendre les chauffeurs et v√©hicule transport dispo
                if (ordre.getChauffeurs() != null) {
                    ordre.getChauffeurs().forEach(ch -> ch.setDisponible(true));
                    chauffeurRepository.saveAll(ordre.getChauffeurs());
                }

                if (ordre.getVehiculeTransport() != null) {
                    ordre.getVehiculeTransport().setDisponible(true);
                    vehiculeTransportRepository.save(ordre.getVehiculeTransport());
                }

                ordre.getVehicules().clear(); // Lib√®re les v√©hicules
                ordreMissionRepository.save(ordre);

                return true;
            }
        }

        return false;
    }


    public List<Vehicule> getVehiculesAvecAvaries() {
        return vehiculeRepository.findAll().stream()
                .filter(v -> v.getAvaries() != null && !v.getAvaries().isEmpty())
                .toList();
    }
    /**
     * ‚úÖ Ajouter un v√©hicule avec ses avaries et photos
     */
    @Transactional
    public Vehicule createVehicule(Vehicule vehicule, List<Avarie> avaries, List<MultipartFile> photos) {
        Parc parcAuport = parcService.getParcByNom("AUPORT");

        vehicule.setParc(parcAuport);
        vehicule.setStatut(StatutVehicule.EN_ETAT);

        // ‚úÖ 2Ô∏è‚É£ Sauvegarde du v√©hicule
        Vehicule savedVehicule = vehiculeRepository.save(vehicule);

        // ‚úÖ 3Ô∏è‚É£ Enregistrement des avaries (si fournies)
        List<Avarie> savedAvaries = new ArrayList<>();
        if (avaries != null && !avaries.isEmpty()) {
            for (Avarie avarie : avaries) {
                avarie.setVehicule(savedVehicule);
                avarie.setStatut(StatutAvarie.EN_COURS);
                Avarie savedAvarie = avarieRepository.save(avarie);
                savedAvaries.add(savedAvarie);
            }
        }

        // ‚úÖ 4Ô∏è‚É£ Enregistrement des photos (si fournies)
        if (photos != null && !photos.isEmpty()) {
            for (MultipartFile file : photos) {
                try {
                    Photo photo = new Photo();
                    photo.setFileName(file.getOriginalFilename());
                    photo.setData(file.getBytes());

                    // ‚úÖ Si on a une seule avarie (souvent le cas), on l‚Äôassocie
                    if (!savedAvaries.isEmpty()) {
                        photo.setAvarie(savedAvaries.get(0)); // ou un mapping plus avanc√© si besoin
                    }

                    photoRepository.save(photo);
                } catch (IOException e) {
                    throw new RuntimeException("‚ùå Erreur lors de l'enregistrement de la photo", e);
                }
            }
        }

        return savedVehicule;
    }


    @Transactional
    public Vehicule updateVehiculeFromDTO(String numeroChassis, VehiculeDTO dto) {
        Vehicule vehicule = vehiculeRepository.findByNumeroChassis(numeroChassis)
                .orElseThrow(() -> new RuntimeException("üö® V√©hicule non trouv√© : " + numeroChassis));

        vehicule.setModele(dto.getModele());
        vehicule.setNumeroChassis(dto.getNumeroChassis());
        vehicule.setCouleur(dto.getCouleur());
        vehicule.setDescription(dto.getDescription());
        vehicule.setEngine(dto.getEngine());
        vehicule.setKeyCode(dto.getKeyCode());
        vehicule.setPegCode(dto.getPegCode());
        vehicule.setProductionDate(dto.getProductionDate());
        vehicule.setStatut(dto.getStatut());

        // ‚úÖ Gestion du Parc (obligatoire)
        Parc parc = parcRepository.findById(dto.getParcId())
                .orElseThrow(() -> new RuntimeException("üö® Parc introuvable avec ID : " + dto.getParcId()));

        vehicule.setParc(parc);

        vehiculeRepository.save(vehicule);

        return vehicule;
    }

    /**
     * ‚úÖ R√©cup√©rer un v√©hicule par ID
     */
    public Vehicule getVehiculeById(Long id) {
        return vehiculeRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("V√©hicule non trouv√© avec l'ID : " + id));
    }

    /**
     * ‚úÖ Supprimer un v√©hicule
     */
    @Transactional
    public void deleteVehicule(Long id) {
        Vehicule vehicule = vehiculeRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("V√©hicule non trouv√© avec l'ID : " + id));

        vehiculeRepository.delete(vehicule);
    }

    /**
     * ‚úÖ Ajouter une avarie √† un v√©hicule existant
     */
    public Avarie ajouterAvarie(Long vehiculeId, Avarie avarie) {
        Vehicule vehicule = vehiculeRepository.findById(vehiculeId)
                .orElseThrow(() -> new EntityNotFoundException("V√©hicule non trouv√© avec l'ID : " + vehiculeId));

        avarie.setVehicule(vehicule);
        avarie.setStatut(StatutAvarie.EN_COURS);

        return avarieRepository.save(avarie);
    }
    /**
     * ‚úÖ Ajouter une photo √† une avarie existante
     */
    @Transactional
    public Photo ajouterPhotos(Long avarieId, MultipartFile file) {
        Avarie avarie = avarieRepository.findById(avarieId)
                .orElseThrow(() -> new EntityNotFoundException("Avarie non trouv√©e avec l'ID : " + avarieId));

        try {
            Photo photo = new Photo();
            photo.setFileName(file.getOriginalFilename());
            photo.setData(file.getBytes()); // ‚úÖ Ajout du contenu de la photo
            photo.setAvarie(avarie);

            return photoRepository.save(photo);
        } catch (IOException e) {
            throw new RuntimeException("‚ùå Erreur lors de l'enregistrement de la photo", e);
        }
    }



    @Transactional
    public Vehicule signalerAvarie(String numeroChassis, String avarieJson, List<MultipartFile> photos) {
        Vehicule vehicule = vehiculeRepository.findByNumeroChassis(numeroChassis)
                .orElseThrow(() -> new EntityNotFoundException("üö® V√©hicule non trouv√© avec le num√©ro de ch√¢ssis : " + numeroChassis));

        System.out.println("üì° V√©hicule trouv√©, ajout de l'avarie...");

        Avarie avarie;
        try {
            avarie = objectMapper.readValue(avarieJson, Avarie.class);
        } catch (JsonProcessingException e) {
            throw new RuntimeException("‚ùå Erreur conversion JSON de l'avarie", e);
        }

        avarie.setVehicule(vehicule);
        avarie.setStatut(StatutAvarie.EN_COURS); // ‚úÖ Par d√©faut √† la cr√©ation

        Avarie savedAvarie = avarieRepository.save(avarie);
        System.out.println("‚úÖ Avarie enregistr√©e avec succ√®s : " + savedAvarie.getType());

        if (photos != null && !photos.isEmpty()) {
            for (MultipartFile file : photos) {
                try {
                    Photo photo = new Photo();
                    photo.setFileName(file.getOriginalFilename());
                    photo.setData(file.getBytes());
                    photo.setAvarie(savedAvarie);
                    photoRepository.save(photo);
                } catch (IOException e) {
                    throw new RuntimeException("‚ùå Erreur lors de l'enregistrement de la photo", e);
                }
            }
        } else {
            System.out.println("‚ö†Ô∏è Aucune photo re√ßue pour cette avarie.");
        }

        vehicule.setStatut(StatutVehicule.AVARIE);
        vehiculeRepository.save(vehicule);

        return vehicule;
    }
    @Transactional
    public Vehicule reparerVehicule(String numeroChassis) {
        Vehicule vehicule = vehiculeRepository.findByNumeroChassis(numeroChassis)
                .orElseThrow(() -> new EntityNotFoundException("üö® V√©hicule non trouv√© : " + numeroChassis));

        if (!vehicule.getStatut().equals(StatutVehicule.AVARIE)) {
            throw new IllegalStateException("üö® Ce v√©hicule n'est pas marqu√© comme AVARIE !");
        }

        System.out.println("üõ† R√©paration en cours pour : " + numeroChassis);

        // üîÅ Cl√¥turer toutes les avaries EN_COURS du v√©hicule
        List<Avarie> avariesEnCours = avarieRepository.findByVehiculeAndStatut(vehicule, StatutAvarie.EN_COURS);
        for (Avarie avarie : avariesEnCours) {
            avarie.setStatut(StatutAvarie.CLOTURE);
            avarieRepository.save(avarie);
            System.out.println("‚úÖ Avarie cl√¥tur√©e : " + avarie.getType());
        }

        vehicule.setStatut(StatutVehicule.EN_ETAT);
        vehiculeRepository.save(vehicule);
        System.out.println("‚úÖ V√©hicule r√©par√© : statut EN_ETAT");

        return vehicule;
    }

    @Transactional
    public Vehicule receptionnerVehicule(String numeroChassis, Long parcId, String avarieJson, List<MultipartFile> photos) {
        Vehicule vehicule = vehiculeRepository.findByNumeroChassis(numeroChassis)
                .orElseThrow(() -> new IllegalStateException("üö® V√©hicule non trouv√©"));

        Parc parc = parcService.getParcById(parcId);
        vehicule.setParc(parc);

        Map<String, Avarie> avarieMap = new HashMap<>();

        if (avarieJson != null && !avarieJson.isEmpty()) {
            ObjectMapper mapper = new ObjectMapper();
            List<Map<String, String>> avariesList;
            try {
                avariesList = mapper.readValue(avarieJson, List.class);
            } catch (JsonProcessingException e) {
                throw new IllegalStateException("‚ùå Erreur lors du parsing du JSON des avaries", e);
            }

            for (Map<String, String> avarieData : avariesList) {
                String type = avarieData.get("type");
                String commentaire = avarieData.get("commentaire");
                String key = avarieData.get("key");

                Avarie avarie = new Avarie();
                avarie.setType(type);
                avarie.setCommentaire(commentaire);
                avarie.setStatut(StatutAvarie.EN_COURS);
                avarie.setVehicule(vehicule);

                avarieMap.put(key, avarie);
            }
        }

        if (photos != null) {
            for (MultipartFile file : photos) {
                String originalFileName = file.getOriginalFilename();
                if (originalFileName == null || !originalFileName.contains("photo-")) continue;

                String key = extractKeyFromFileName(originalFileName);

                Avarie avarie = avarieMap.get(key);
                if (avarie != null) {
                    try {
                        byte[] data = file.getBytes();
                        Photo photo = new Photo(originalFileName, data, avarie);
                        avarie.getPhotos().add(photo);
                    } catch (IOException e) {
                        throw new IllegalStateException("‚ùå Erreur lecture fichier photo : " + originalFileName, e);
                    }
                }
            }
        }

        if (!avarieMap.isEmpty()) {
            vehicule.setStatut(StatutVehicule.AVARIE);
        } else {
            vehicule.setStatut(StatutVehicule.EN_ETAT);
        }

        List<Avarie> avariesToSave = new ArrayList<>(avarieMap.values());
        vehicule.setAvaries(avariesToSave);

        Vehicule savedVehicule = vehiculeRepository.save(vehicule);

        // üîê R√©cup√©ration de l'utilisateur connect√©
        String email = SecurityContextHolder.getContext().getAuthentication().getName();
        Utilisateur utilisateur = utilisateurRepository.findByEmail(email)
                .orElseThrow(() -> new IllegalStateException("‚ùå Utilisateur connect√© introuvable"));

        // üîÅ Cr√©ation du mouvement
        Mouvement mouvement = new Mouvement();
        mouvement.setNumeroChassis(numeroChassis);
        mouvement.setSequence(mouvementRepository.countByNumeroChassis(numeroChassis) + 1);
        mouvement.setParc(parc);
        mouvement.setTypeMouvement(
                typeMouvementRepository.findByLibelTransact("RC")
                        .orElseThrow(() -> new IllegalStateException("‚ùå Type mouvement 'RC' introuvable"))
        );
        mouvement.setQty(+1);
        mouvement.setDateMouvement(LocalDate.now());
        mouvement.setHeureMouvement(LocalTime.now());
        mouvement.setUtilisateur(utilisateur);
        mouvement.setUtilisateurNomComplet(utilisateur.getPrenom() + " " + utilisateur.getNom());

        mouvementRepository.save(mouvement);

        return savedVehicule;
    }




    private String extractKeyFromFileName(String fileName) {
        // ex: photo-av1679510923_0-0.png ‚Üí renvoie "av1679510923_0"
        int start = fileName.indexOf("photo-") + 6;
        int end = fileName.lastIndexOf("-");
        return fileName.substring(start, end);
    }


    public Vehicule findByNumeroChassis(String numeroChassis) {
        return vehiculeRepository.findByNumeroChassis(numeroChassis).orElse(null);
    }
    @Transactional
    public Vehicule creerAvarie(String numeroChassis, String avarieJson, List<MultipartFile> photos) {
        Vehicule vehicule = vehiculeRepository.findByNumeroChassis(numeroChassis)
                .orElseThrow(() -> new EntityNotFoundException("üö® V√©hicule non trouv√© : " + numeroChassis));

        Avarie avarie;
        try {
            avarie = objectMapper.readValue(avarieJson, Avarie.class);
        } catch (JsonProcessingException e) {
            throw new IllegalArgumentException("‚ùå Erreur de format JSON pour l‚Äôavarie.");
        }

        avarie.setVehicule(vehicule);
        avarie.setStatut(StatutAvarie.EN_COURS); // ‚úÖ statut initial
        avarie = avarieRepository.save(avarie);

        if (photos != null && !photos.isEmpty()) {
            for (MultipartFile file : photos) {
                try {
                    Photo photo = new Photo();
                    photo.setFileName(file.getOriginalFilename());
                    photo.setData(file.getBytes());
                    photo.setAvarie(avarie);
                    photoRepository.save(photo);
                } catch (IOException e) {
                    throw new RuntimeException("‚ùå Erreur lors de l‚Äôenregistrement de la photo", e);
                }
            }
        }

        if (vehicule.getStatut() != StatutVehicule.AVARIE) {
            vehicule.setStatut(StatutVehicule.AVARIE);
            vehiculeRepository.save(vehicule);
        }

        return vehicule;
    }

    @Transactional
    public Vehicule save(Vehicule vehicule) {
        return vehiculeRepository.save(vehicule);
    }
    public List<Vehicule> getVehiculesByParcs(List<Long> ids) {
        return vehiculeRepository.findByParcIdIn(ids);
    }

    public List<VehiculeDTO> getVehiculesByParc(String parcNom) {
        System.out.println("üîç Recherche des v√©hicules pour le parc : " + parcNom);
        List<Vehicule> vehicules = vehiculeRepository.findByParcNom(parcNom);
        System.out.println("üì° V√©hicules trouv√©s : " + vehicules.size());

        return vehicules.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }
    private VehiculeDTO convertToDTO(Vehicule vehicule) {
        return new VehiculeDTO(vehicule); // ‚úÖ Utilisation du constructeur existant
    }
    public Map<String, Long> getNombreVehiculesParStatut() {
        List<Object[]> result = vehiculeRepository.countVehiculesByStatut();
        Map<String, Long> stats = new LinkedHashMap<>();
        for (Object[] row : result) {
            StatutVehicule statut = (StatutVehicule) row[0];
            Long count = (Long) row[1];
            stats.put(statut.name(), count);
        }
        return stats;
    }
}
